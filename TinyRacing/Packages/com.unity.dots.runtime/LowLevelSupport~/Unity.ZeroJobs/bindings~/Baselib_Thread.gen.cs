//
// File autogenerated from Include/C/Baselib_Thread.h
//

using System;
using System.Runtime.InteropServices;
using size_t = System.UIntPtr;

namespace Unity.Baselib.LowLevel
{
    internal static unsafe partial class Binding
    {
        /// <summary>Baselib_Thread_Id that is guaranteed not to represent a thread</summary>
        public static readonly IntPtr Baselib_Thread_InvalidId = IntPtr.Zero;
        /// <summary>Yields the execution context of the current thread to other threads, potentially causing a context switch.</summary>
        /// <remarks>The operating system may decide to not switch to any other thread.</remarks>
        [DllImport(BaselibNativeLibrary.DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void Baselib_Thread_YieldExecution();
        /// <summary>Return the thread id of the current thread, i.e. the thread that is calling this function</summary>
        [DllImport(BaselibNativeLibrary.DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern IntPtr Baselib_Thread_GetCurrentThreadId();
    }
}
